{"version":3,"sources":["App.js","index.js"],"names":["Chart","data","useState","timeData","setTimeData","windowSize","setWindowSize","lockTag","setLockTag","margin","width","height","xScale","d3","domain","item","x","range","yScale","y","line","getTime","Date","time","colorScale","ticks","length","className","id","type","placeholder","onChange","e","target","value","viewBox","transform","fill","stroke","d","map","i","date","key","onClick","console","log","onMouseEnter","onMouseLeave","r","opacity","getFullYear","getMonth","toString","padStart","getDate","getHours","dominantBaseline","fontSize","AllWordPlot","allWord","setAllWord","useEffect","fetch","then","response","json","circleSize","Math","count","circleScale","nice","circleOpacity","word","color","textAnchor","WordPlot","words","setWords","cDate","jsonUrl","year","month","day","newDate","hour","chackTime","startDate","endDate","urls","push","d1","d2","requests","url","Promise","all","dateItems","total_count","Object","values","App","setData","render","document","querySelector"],"mappings":"wMAwCMA,EAAQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACMC,mBAAS,IADf,mBACnBC,EADmB,KACTC,EADS,OAIUF,mBAAS,IAJnB,mBAInBG,EAJmB,KAIPC,EAJO,OAMIJ,oBAAS,GANb,mBAMnBK,EANmB,KAMVC,EANU,KAUpBC,EAAiB,GAAjBA,EAAqC,GACrCC,EAAQD,EADoB,GAFb,IAIfE,EAASF,EAFwC,GADjC,IAIhBG,EAASC,MAEZC,OAAOD,IAAUZ,GAAM,SAACc,GAAD,OAAUA,EAAKC,MACtCC,MAAM,CAAC,EARW,MASfC,EAASL,MAEZC,OAAOD,IAAUZ,GAAM,SAACc,GAAD,OAAUA,EAAKI,MACtCF,MAAM,CAXa,IAWG,IACnBG,EAAOP,MAEVG,GAAE,SAACD,GAAD,OAAUH,EAAOG,EAAKC,MACxBG,GAAE,SAACJ,GAAD,OAAUG,EAAOH,EAAKI,MACrBE,EAAU,SAACN,GAEf,OADa,IAAIO,KAAKP,EAAKQ,MACfF,WAERG,EAAaX,IACAA,KAChBC,OAAOD,IAAUZ,EAAMoB,IAO1B,OAJIG,EAAWC,QAAQC,OAKrB,yBAAKC,UAAU,uBACb,6BAASA,UAAU,wBACjB,yBAAKA,UAAU,uBAGb,uBAAGA,UAAU,WACX,2BACEC,GAAG,aACHD,UAAU,QACVE,KAAK,OACLC,YAAY,yBAGZC,SAAU,SAACC,GAETxB,GAAW,GACXF,EAAc0B,EAAEC,OAAOC,aASjC,yBAAKP,UAAU,uBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,+BACb,wBAAIA,UAAU,cAAd,oCAEF,yBAAKA,UAAU,OACb,yBAAKQ,QAAO,cAASzB,EAAT,YAAkBC,IAC5B,uBAAGyB,UAAS,oBAAe3B,EAAf,aAA+BA,EAA/B,MACV,2BACE,0BAAM4B,KAAK,OAAOC,OAAO,YAAYC,EAAGnB,EAAKnB,MAE/C,2BACGA,EAAKuC,KAAI,SAACzB,EAAM0B,GAEf,IAAMC,EAAO,IAAIpB,KAAKP,EAAKQ,MAI3B,OACE,uBACEoB,IAAKF,EACLL,UAAS,oBAAexB,EAAOG,EAAKC,GAA3B,aAAkCE,EACzCH,EAAKI,GADE,KAGTyB,QAAS,WACP,IAAIzC,EAAWY,EAAKQ,KAEpBnB,EAAYD,GAEZK,GAAW,GACXqC,QAAQC,IAAIvC,IAEdwC,aAAc,WACZ,IAAgB,IAAZxC,EAAmB,CACrBsC,QAAQC,IAAIvC,GACZ,IAAIJ,EAAWY,EAAKQ,KAEpBnB,EAAYD,KAIhB6C,aAAc,WACZ,IAAgB,IAAZzC,EAAmB,CACrBsC,QAAQC,IAAIvC,GACZ,IAAIJ,EAAW,IAAImB,KAEnBlB,EAAYD,MAIhB,4BACE8C,EAAE,IACFC,QAAQ,MACRb,KAAI,UAAKb,EAAWH,EAAQN,MAE5B,+BACG2B,EAAKS,cADR,KAEIT,EAAKU,WAAa,GACjBC,WACAC,SAAS,EAAG,KAJjB,IAKIZ,EAAKa,UAAUF,WAAWC,SAAS,EAAG,KAL1C,IAMGZ,EAAKc,WAAWH,WAAWC,SAAS,EAAG,aAQtD,uBACElB,UAAS,oBAAe3B,EAAf,aACPA,EA/HI,IA+HyB,GADtB,MAIRe,EAAWC,QAAQe,KAAI,SAACzB,EAAM0B,GAC7B,IAAMC,EAAO,IAAIpB,KAAKP,GACtB,OACE,uBAAG4B,IAAKF,EAAGL,UAAS,oBAAe,GAAKK,EAApB,KAA0B,EAA1B,MAClB,4BACEQ,EAAE,IACFC,QAAQ,MACRb,KAAI,UAAKb,EAAWT,MAEtB,0BAAM0C,iBAAiB,UAAUC,SAAS,KAAK1C,EAAE,KAC9C0B,EAAKS,eACJT,EAAKU,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAC7CZ,EAAKa,UAAUF,WAAWC,SAAS,EAAG,cASvD,yBAAK3B,UAAU,UACb,4BACEA,UAAU,iCACViB,QAAS,WACPpC,GAAW,GACX,IAAIL,EAAW,IAAImB,KAEnBlB,EAAYD,KANhB,UAYA,yBAAKwB,UAAU,aAEQ,IAApBxB,EAASuB,OACR,yBAAKC,UAAU,aACb,kBAAC,EAAD,OAGF,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAUxB,SAAUA,EAAUE,WAAYA,WAatDsD,EAAc,WAAO,IAAD,EACMzD,mBAAS,IADf,mBACjB0D,EADiB,KACRC,EADQ,KAExBC,qBAAU,WACRC,MAAM,+BAEHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAACJ,GAELC,EAAWD,QAEd,IAEH,IAKMnD,EACE,GADFA,EAGC,GAIDC,EAZe,IAYQD,EALpB,GAMHE,EAZgB,IAYSF,EAJrB,GAcJ0D,EAAa,SAAC5B,GAAD,OAA2B,EAApB6B,KAAKtB,IAAIP,EAAE8B,QAK/BC,EAAczD,MAEjBC,OAAO,CACND,IAAO+C,GAAS,SAAC7C,GAAD,OAAUA,EAAKsD,SAC/BxD,IAAO+C,GAAS,SAAC7C,GAAD,OAAUA,EAAKsD,WAEhCpD,MAAM,CAAC,GAAK,IACZsD,OAIGC,EAAgB,SAACjC,GAAD,OAAO+B,EAAY/B,EAAE8B,QAKrCzD,EAASC,MAEZC,OAAO,CACND,IAAO+C,GAAS,SAAC7C,GAAD,OAAUA,EAAKC,KAC/BH,IAAO+C,GAAS,SAAC7C,GAAD,OAAUA,EAAKC,OAEhCC,MAAM,CAAC,EAlDW,MAmDlBsD,OAEGrD,EAASL,MAEZC,OAAO,CACND,IAAO+C,GAAS,SAAC7C,GAAD,OAAUA,EAAKI,KAC/BN,IAAO+C,GAAS,SAAC7C,GAAD,OAAUA,EAAKI,OAEhCF,MAAM,CAAC,EA1DY,MA2DnBsD,OAEH,OACE,yBAAK5C,UAAU,aACb,yBAAKA,UAAU,+BACb,wBAAIA,UAAU,cAAd,kBAEF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKQ,QAAO,cAASzB,EAAT,YAAkBC,IAC5B,uBAAGyB,UAAS,oBAAe3B,EAAf,aAA+BA,EAA/B,MACTmD,EAAQpB,KAAI,SAACzB,EAAM0B,GAClB,OACE,uBACEE,IAAKF,EACLL,UAAS,oBAAexB,EAAOG,EAAKC,GAA3B,aAAkCE,EACzCH,EAAKI,GADE,MAKT,yCAAWJ,EAAK0D,OAChB,4BACExB,EAAC,UAAwB,IAAnBkB,EAAWpD,GAAhB,MACDsB,MAlELE,EAkEiBxB,EAAK2D,MAjEzB,QAANnC,EAAoB,YACZA,GAiEMW,QAASsB,EAAczD,KAGzB,0BACE2C,SAAQ,UAAwB,GAAnBS,EAAWpD,GAAhB,MACR4D,WAAW,SACXlB,iBAAiB,WAEhB1C,EAAK0D,OA3EZ,IAAClC,WAyFXqC,EAAW,SAAC,GAA8B,IAA5BzE,EAA2B,EAA3BA,SAAUE,EAAiB,EAAjBA,WAAiB,EACnBH,mBAAS,IADU,mBACtC2E,EADsC,KAC/BC,EAD+B,KAInB,IAAtBzE,EAAWqB,SAAcrB,EAAa,GAI1C,IAAM0E,EAAQ,IAAIzD,KAAKnB,GAWvB2D,qBAAU,WACR,IAAMkB,EAAU,SAACtC,GACf,IAAIuC,EAAOvC,EAAKS,cACZ+B,GAASxC,EAAKU,WAAa,GAAGC,WAAWC,SAAS,EAAG,KACrD6B,EAAMzC,EAAKa,UAAUF,WAAWC,SAAS,EAAG,KAE5C8B,EAAO,UAAMH,GAAN,OAAaC,GAAb,OAAqBC,GAC5BE,EAAO3C,EAAKc,WAAWH,WAAWC,SAAS,EAAG,KAElD,MADQ,2CAAuC8B,EAAvC,YAAkDA,EAAlD,YAA6DC,EAA7D,UAIJC,EAAY,SAAC5C,GACjB,IAAI6C,EAAY,IAAIjE,KAAK,oBACrBkE,EAAU,IAAIlE,KAAK,oBAEvB,OACEoB,EAAKrB,WAAakE,EAAUlE,WAC5BqB,EAAKrB,WAAamE,EAAQnE,UAEnB,EACK,GAGVqB,EAAO,IAAIpB,KAAKnB,GAChBsF,EAAO,GACb,GAAIH,EAAU5C,GAAO,CAEnB+C,EAAKC,KAAKV,EAAQtC,IAClB,IAAK,IAAID,EAAI,EAAGA,GAAKpC,IAAcoC,EAAG,CACpC,IAAMkD,EAAK,IAAIrE,KAAKoB,EAAKrB,UAAY,KAAUoB,GAC3C6C,EAAUK,IACZF,EAAKC,KAAKV,EAAQW,IAEpB,IAAMC,EAAK,IAAItE,KAAKoB,EAAKrB,UAAY,KAAUoB,GAC3C6C,EAAUM,IACZH,EAAKC,KAAKV,EAAQY,KAKxB/C,QAAQC,IAAI2C,GAIZ,IAAMI,EAAWJ,EAAKjD,KAAI,SAACsD,GACzB,OAAO/B,MAAM+B,GAAK9B,MAAK,SAACC,GAAD,OAAcA,EAASC,aAGhDrB,QAAQC,IAAI,UAAY+C,GAExBE,QAAQC,IAAIH,GAAU7B,MAAK,SAAC/D,GAC1B4C,QAAQC,IAAI,UAAY7C,GACxB,IAFmC,EAE7B4E,EAAQ,GAFqB,cAGX5E,GAHW,IAGnC,2BAA8B,CAAC,IAAD,EAAnBgG,EAAmB,sBACTA,GADS,IAC5B,2BAA8B,CAAC,IAApBlF,EAAmB,QAEtBA,EAAK0D,QAAQI,IACjBA,EAAM9D,EAAK0D,MAAQ,CACjBA,KAAM1D,EAAK0D,KACXJ,MAAO,EACP6B,YAAanF,EAAKmF,YAClBxB,MAAO3D,EAAK2D,MACZ1D,EAAGD,EAAKC,EACRG,EAAGJ,EAAKI,IAGZ0D,EAAM9D,EAAK0D,MAAMJ,OAAStD,EAAKsD,OAbL,gCAHK,8BAoBnCS,EAASqB,OAAOC,OAAOvB,SAExB,CAAC1E,EAAUE,IAEd,IAKMI,EACE,GADFA,EAGC,GAIDC,EAZe,IAYQD,EALpB,GAMHE,EAZgB,IAYSF,EAJrB,GAcJ0D,EAAa,SAAC5B,GAAD,OAA2B,GAApB6B,KAAKtB,IAAIP,EAAE8B,QAK/BC,EAAczD,MAEjBC,OAAO,CACND,IAAOgE,GAAO,SAAC9D,GAAD,OAAUA,EAAKsD,SAC7BxD,IAAOgE,GAAO,SAAC9D,GAAD,OAAUA,EAAKsD,WAE9BpD,MAAM,CAAC,GAAK,IACZsD,OAIGC,EAAgB,SAACjC,GAAD,OAAO+B,EAAY/B,EAAE8B,QAErCzD,EAASC,MAEZC,OAAO,CAACD,IAAOgE,GAAO,SAAC9D,GAAD,OAAUA,EAAKC,KAAIH,IAAOgE,GAAO,SAAC9D,GAAD,OAAUA,EAAKC,OACtEC,MAAM,CAAC,EA5CW,MA6ClBsD,OAEGrD,EAASL,MAEZC,OAAO,CAACD,IAAOgE,GAAO,SAAC9D,GAAD,OAAUA,EAAKI,KAAIN,IAAOgE,GAAO,SAAC9D,GAAD,OAAUA,EAAKI,OACtEF,MAAM,CAAC,EAjDY,MAkDnBsD,OAEH,OAAwB,IAAjBM,EAAMnD,OACX,yBAAKC,UAAU,aACb,kBAAC,EAAD,OAGF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,+BACb,wBAAIA,UAAU,cACXoD,EAAM5B,cADT,KAEI4B,EAAM3B,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAFjD,IAGGyB,EAAMxB,UAAUF,WAAWC,SAAS,EAAG,KAH1C,IAIGyB,EAAMvB,WAAWH,WAAWC,SAAS,EAAG,KAJ3C,aAI2DjD,IAG7D,yBAAKsB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKQ,QAAO,cAASzB,EAAT,YAAkBC,IAC5B,uBAAGyB,UAAS,oBAAe3B,EAAf,aAA+BA,EAA/B,MACToE,EAAMrC,KAAI,SAACzB,EAAM0B,GAChB,OACE,uBACEE,IAAKF,EACLL,UAAS,oBAAexB,EAAOG,EAAKC,GAA3B,aAAkCE,EACzCH,EAAKI,GADE,MAKT,8CAAgBJ,EAAK0D,OACrB,4BACExB,EAAC,UAAwB,IAAnBkB,EAAWpD,GAAhB,MACDsB,MAlELE,EAkEiBxB,EAAK2D,MAjEzB,QAANnC,EAAoB,YACZA,GAiEMW,QAASsB,EAAczD,KAGzB,0BACE2C,SAAQ,UAAwB,IAAnBS,EAAWpD,GAAhB,MACR4D,WAAW,SACXlB,iBAAiB,WAGhB1C,EAAK0D,OA5EZ,IAAClC,WAyFF8D,EAtiBH,WAAO,IAAD,EACQnG,mBAAS,IADjB,mBACTD,EADS,KACHqG,EADG,KAahB,OAXAxC,qBAAU,WACRC,MAAM,wCAEHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAAC/D,GAELqG,EAAQrG,QAEX,IAGD,6BACE,6BAAS0B,UAAU,mBACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,SACA,wBAAIA,UAAU,YAAd,YAMN,kBAAC,EAAD,CAAO1B,KAAMA,IAGb,4BAAQ0B,UAAU,UAChB,yBAAKA,UAAU,6BACb,wDC5BV4E,iBAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,e","file":"static/js/main.8d9f0193.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch(\"twi_time_coordinate_200_w8_ws20.json\")\n      // fetch(\"test.json\")\n      .then((response) => response.json())\n      // .then((text) => // // console.log(text));\n      .then((data) => {\n        // // console.log(data);\n        setData(data);\n      });\n  }, []);\n\n  return (\n    <div>\n      <section className=\"hero is-primary\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">hello</h1>\n            <h2 className=\"subtitle\">hello</h2>\n          </div>\n        </div>\n      </section>\n      {/* <section className=\"section\"> */}\n      {/* <div className=\"container max-width\"> */}\n      <Chart data={data} />\n      {/* </div> */}\n      {/* </section> */}\n      <footer className=\"footer\">\n        <div className=\"content has-text-centered\">\n          <p>&copy;2020 xiaotiandong</p>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nconst Chart = ({ data }) => {\n  const [timeData, setTimeData] = useState([]);\n  // // // console.log(timeData);\n\n  const [windowSize, setWindowSize] = useState([]);\n\n  const [lockTag, setLockTag] = useState(false);\n\n  const contentWidth = 800;\n  const contentHeight = 800;\n  const margin = { left: 20, right: 20, top: 20, bottom: 70 };\n  const width = margin.left + margin.right + contentWidth;\n  const height = margin.top + margin.bottom + contentHeight;\n  const xScale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, (item) => item.x))\n    .range([0, contentWidth]);\n  const yScale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, (item) => item.y))\n    .range([contentHeight, 0]);\n  const line = d3\n    .line()\n    .x((item) => xScale(item.x))\n    .y((item) => yScale(item.y));\n  const getTime = (item) => {\n    const date = new Date(item.time);\n    return date.getTime();\n  };\n  const colorScale = d3\n    .scaleSequential(d3.interpolateCool)\n    .domain(d3.extent(data, getTime));\n\n  // // // console.log(colorScale.ticks());\n  if (colorScale.ticks().length !== 0) {\n    // // console.log(colorScale.ticks());\n  }\n\n  return (\n    <div className=\"container max-width\">\n      <section className=\"section is-fullwidth\">\n        <div className=\"container max-width\">\n          {/* <nav className=\"panel\"> */}\n          {/* <div className=\"panel-block\"> */}\n          <p className=\"control\">\n            <input\n              id=\"windowSize\"\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"Window size, defult 5.\"\n              // value=\"3\"\n              // defaultValue=\"5\"\n              onChange={(e) => {\n                // // console.log(\"e = \" + e.target.value);\n                setLockTag(false);\n                setWindowSize(e.target.value);\n                // // console.log(\"windowSize = \" + windowSize);\n              }}\n            />\n          </p>\n          {/* </div> */}\n          {/* </nav> */}\n        </div>\n      </section>\n      <div className=\"container max-width\">\n        <div className=\"columns\">\n          <div className=\"column is-two-fifths\">\n            <div className=\"container has-text-centered\">\n              <h3 className=\"title is-4\">twi_time_coordinate_200_w8_ws20</h3>\n            </div>\n            <div className=\"box\">\n              <svg viewBox={`0 0 ${width} ${height}`}>\n                <g transform={`translate(${margin.left}, ${margin.top})`}>\n                  <g>\n                    <path fill=\"none\" stroke=\"lightgray\" d={line(data)} />\n                  </g>\n                  <g>\n                    {data.map((item, i) => {\n                      // // console.log(\"before: \" + item.time);\n                      const date = new Date(item.time);\n                      // // // console.log(\"after: \" + date);\n                      // // // console.log(item.time);\n\n                      return (\n                        <g\n                          key={i}\n                          transform={`translate(${xScale(item.x)}, ${yScale(\n                            item.y\n                          )})`}\n                          onClick={() => {\n                            var timeData = item.time;\n                            // console.log(timeData);\n                            setTimeData(timeData);\n                            // console.log(\"windowSize = \" + windowSize);\n                            setLockTag(true);\n                            console.log(lockTag);\n                          }}\n                          onMouseEnter={() => {\n                            if (lockTag === false) {\n                              console.log(lockTag);\n                              var timeData = item.time;\n                              // console.log(timeData);\n                              setTimeData(timeData);\n                              // console.log(\"windowSize = \" + windowSize);\n                            }\n                          }}\n                          onMouseLeave={() => {\n                            if (lockTag === false) {\n                              console.log(lockTag);\n                              var timeData = new Date();\n                              // console.log(timeData);\n                              setTimeData(timeData);\n                            }\n                          }}\n                        >\n                          <circle\n                            r=\"3\"\n                            opacity=\"0.5\"\n                            fill={`${colorScale(getTime(item))}`}\n                          >\n                            <title>\n                              {date.getFullYear()}/\n                              {(date.getMonth() + 1)\n                                .toString()\n                                .padStart(2, \"0\")}\n                              /{date.getDate().toString().padStart(2, \"0\")}-\n                              {date.getHours().toString().padStart(2, \"0\")}\n                            </title>\n                          </circle>\n                        </g>\n                      );\n                    })}\n                  </g>\n                </g>\n                <g\n                  transform={`translate(${margin.left}, ${\n                    margin.top + contentHeight + 25\n                  })`}\n                >\n                  {colorScale.ticks().map((item, i) => {\n                    const date = new Date(item);\n                    return (\n                      <g key={i} transform={`translate(${90 * i}, ${0})`}>\n                        <circle\n                          r=\"3\"\n                          opacity=\"0.5\"\n                          fill={`${colorScale(item)}`}\n                        ></circle>\n                        <text dominantBaseline=\"central\" fontSize=\"12\" x=\"5\">\n                          {date.getFullYear()}\n                          {(date.getMonth() + 1).toString().padStart(2, \"0\")}\n                          {date.getDate().toString().padStart(2, \"0\")}\n                        </text>\n                      </g>\n                    );\n                  })}\n                </g>\n              </svg>\n            </div>\n          </div>\n          <div className=\"column\">\n            <button\n              className=\"button is-rounded is-fullwidth\"\n              onClick={function () {\n                setLockTag(false);\n                var timeData = new Date();\n                // console.log(timeData);\n                setTimeData(timeData);\n              }}\n            >\n              unlock\n            </button>\n            {/* <section className=\"section\"> */}\n            <div className=\"container\">\n              {/* <div className=\"column\"> */}\n              {timeData.length === 0 ? (\n                <div className=\"container\">\n                  <AllWordPlot />\n                </div>\n              ) : (\n                <div className=\"container\">\n                  <WordPlot timeData={timeData} windowSize={windowSize} />\n                </div>\n              )}\n            </div>\n            {/* </div> */}\n            {/* </section> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst AllWordPlot = () => {\n  const [allWord, setAllWord] = useState([]);\n  useEffect(() => {\n    fetch(\"dbscan_word_coordinate.json\")\n      // fetch(\"test.json\")\n      .then((response) => response.json())\n      // .then((text) => console.log(text));\n      .then((allWord) => {\n        // console.log(allWord);\n        setAllWord(allWord);\n      });\n  }, []);\n\n  const contentWidth = 800;\n  const contentHeight = 800;\n\n  // console.log(allWord);\n\n  const margin = {\n    left: 50,\n    right: 50,\n    top: 10,\n    bottom: 20,\n  };\n\n  const width = contentWidth + margin.left + margin.right;\n  const height = contentHeight + margin.top + margin.bottom;\n\n  // const color = d3.scaleOrdinal(d3.schemeAccent);\n\n  const color = (d) => {\n    if (d === \"red\") return \"lightgray\";\n    else return d;\n  };\n\n  // const circleSize = (d) => Math.pow(d.count, 0.7);\n  const circleSize = (d) => Math.log(d.count) * 3;\n\n  // const countMax = d3.max(words, (item) => item.count);\n  // const countMin = d3.min(words, (item) => item.count);\n\n  const circleScale = d3\n    .scaleLinear()\n    .domain([\n      d3.min(allWord, (item) => item.count),\n      d3.max(allWord, (item) => item.count),\n    ])\n    .range([0.5, 1])\n    .nice();\n\n  // console.log(countMin);\n\n  const circleOpacity = (d) => circleScale(d.count);\n  // 对数log处理 ， 透明度\n\n  // const circleSize = (d) => d.count;\n\n  const xScale = d3\n    .scaleLinear()\n    .domain([\n      d3.min(allWord, (item) => item.x),\n      d3.max(allWord, (item) => item.x),\n    ])\n    .range([0, contentWidth])\n    .nice();\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([\n      d3.max(allWord, (item) => item.y),\n      d3.min(allWord, (item) => item.y),\n    ])\n    .range([0, contentHeight])\n    .nice();\n\n  return (\n    <div className=\"container\">\n      <div className=\"container has-text-centered\">\n        <h3 className=\"title is-4\">All Time Word</h3>\n      </div>\n      <div className=\"container\">\n        <div className=\"box\">\n          <svg viewBox={`0 0 ${width} ${height}`}>\n            <g transform={`translate(${margin.left}, ${margin.top})`}>\n              {allWord.map((item, i) => {\n                return (\n                  <g\n                    key={i}\n                    transform={`translate(${xScale(item.x)}, ${yScale(\n                      item.y\n                    )})`}\n                    // style={{ cursor: \"pointer\" }}\n                  >\n                    <title>{`${item.word}`}</title>\n                    <circle\n                      r={`${circleSize(item) * 1.2}px`}\n                      fill={color(item.color)}\n                      opacity={circleOpacity(item)}\n                      // fill={item.color}\n                    />\n                    <text\n                      fontSize={`${circleSize(item) * 0.6}px`}\n                      textAnchor=\"middle\"\n                      dominantBaseline=\"central\"\n                    >\n                      {item.word}\n                    </text>\n                  </g>\n                );\n              })}\n            </g>\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n//////////////////////////\nconst WordPlot = ({ timeData, windowSize }) => {\n  const [words, setWords] = useState([]);\n\n  // // console.log(\"timeData = \" + timeData);\n  if (windowSize.length === 0) windowSize = 5;\n\n  // console.log(\"windowSize = \" + windowSize);\n\n  const cDate = new Date(timeData);\n  // const windowSize = 5;\n\n  // useEffect(() => {\n  //   fetch(timeData)\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       setData(data);\n  //     });\n  // }, [timeData]);\n\n  useEffect(() => {\n    const jsonUrl = (date) => {\n      var year = date.getFullYear();\n      var month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n      var day = date.getDate().toString().padStart(2, \"0\");\n\n      var newDate = `${year}${month}${day}`;\n      var hour = date.getHours().toString().padStart(2, \"0\");\n      var path = `./dbscan_word_coordinate_by_hour/${newDate}/${newDate}_${hour}.json`;\n      return path;\n    };\n\n    const chackTime = (date) => {\n      var startDate = new Date(\"2019/12/17 10:00\");\n      var endDate = new Date(\"2020/03/31 23:00\");\n\n      if (\n        date.getTime() >= startDate.getTime() &&\n        date.getTime() <= endDate.getTime()\n      ) {\n        return 1;\n      } else return 0;\n    };\n\n    const date = new Date(timeData);\n    const urls = [];\n    if (chackTime(date)) {\n      // // console.log(\"safe \" + date);\n      urls.push(jsonUrl(date));\n      for (let i = 1; i <= windowSize; ++i) {\n        const d1 = new Date(date.getTime() + 3600000 * i);\n        if (chackTime(d1)) {\n          urls.push(jsonUrl(d1));\n        }\n        const d2 = new Date(date.getTime() - 3600000 * i);\n        if (chackTime(d2)) {\n          urls.push(jsonUrl(d2));\n        }\n      }\n    }\n\n    console.log(urls);\n\n    // TODO deal non-existent urls\n\n    const requests = urls.map((url) => {\n      return fetch(url).then((response) => response.json());\n    });\n\n    console.log(\"reqs = \" + requests);\n\n    Promise.all(requests).then((data) => {\n      console.log(\"data = \" + data);\n      const words = {};\n      for (const dateItems of data) {\n        for (const item of dateItems) {\n          // // // console.log(\"item.word = \" + item.word);\n          if (!(item.word in words)) {\n            words[item.word] = {\n              word: item.word,\n              count: 0,\n              total_count: item.total_count,\n              color: item.color,\n              x: item.x,\n              y: item.y,\n            };\n          }\n          words[item.word].count += item.count;\n        }\n      }\n      // // console.log(\"words = \" + words);\n      setWords(Object.values(words));\n    });\n  }, [timeData, windowSize]);\n\n  const contentWidth = 800;\n  const contentHeight = 800;\n\n  // // console.log(words);\n\n  const margin = {\n    left: 50,\n    right: 50,\n    top: 10,\n    bottom: 20,\n  };\n\n  const width = contentWidth + margin.left + margin.right;\n  const height = contentHeight + margin.top + margin.bottom;\n\n  // const color = d3.scaleOrdinal(d3.schemeAccent);\n\n  const color = (d) => {\n    if (d === \"red\") return \"lightgray\";\n    else return d;\n  };\n\n  // const circleSize = (d) => Math.pow(d.count, 0.7);\n  const circleSize = (d) => Math.log(d.count) * 12;\n\n  // const countMax = d3.max(words, (item) => item.count);\n  // const countMin = d3.min(words, (item) => item.count);\n\n  const circleScale = d3\n    .scaleLinear()\n    .domain([\n      d3.min(words, (item) => item.count),\n      d3.max(words, (item) => item.count),\n    ])\n    .range([0.5, 1])\n    .nice();\n\n  // console.log(countMin);\n\n  const circleOpacity = (d) => circleScale(d.count);\n\n  const xScale = d3\n    .scaleLinear()\n    .domain([d3.min(words, (item) => item.x), d3.max(words, (item) => item.x)])\n    .range([0, contentWidth])\n    .nice();\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([d3.max(words, (item) => item.y), d3.min(words, (item) => item.y)])\n    .range([0, contentHeight])\n    .nice();\n\n  return words.length === 0 ? (\n    <div className=\"container\">\n      <AllWordPlot />\n    </div>\n  ) : (\n    <div className=\"container\">\n      <div className=\"container has-text-centered\">\n        <h3 className=\"title is-4\">\n          {cDate.getFullYear()}/\n          {(cDate.getMonth() + 1).toString().padStart(2, \"0\")}/\n          {cDate.getDate().toString().padStart(2, \"0\")}-\n          {cDate.getHours().toString().padStart(2, \"0\")} window = {windowSize}\n        </h3>\n      </div>\n      <div className=\"container\">\n        <div className=\"box\">\n          <svg viewBox={`0 0 ${width} ${height}`}>\n            <g transform={`translate(${margin.left}, ${margin.top})`}>\n              {words.map((item, i) => {\n                return (\n                  <g\n                    key={i}\n                    transform={`translate(${xScale(item.x)}, ${yScale(\n                      item.y\n                    )})`}\n                    // style={{ cursor: \"pointer\" }}\n                  >\n                    <title>{`word:${item.word}`}</title>\n                    <circle\n                      r={`${circleSize(item) * 1.4}px`}\n                      fill={color(item.color)}\n                      opacity={circleOpacity(item)}\n                      // fill={item.color}\n                    />\n                    <text\n                      fontSize={`${circleSize(item) * 1.6}px`}\n                      textAnchor=\"middle\"\n                      dominantBaseline=\"central\"\n                      // visibility=\"hidden\"\n                    >\n                      {item.word}\n                    </text>\n                  </g>\n                );\n              })}\n            </g>\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import \"bulma/css/bulma.css\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nrender(<App />, document.querySelector(\"#content\"));\n"],"sourceRoot":""}