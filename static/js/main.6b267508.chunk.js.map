{"version":3,"sources":["App.js","index.js"],"names":["Chart","data","useState","timeData","setTimeData","windowSize","setWindowSize","margin","width","height","xScale","d3","domain","item","x","range","yScale","y","line","getTime","Date","time","colorScale","ticks","length","className","id","type","placeholder","onChange","e","target","value","viewBox","transform","fill","stroke","d","map","i","date","key","onMouseEnter","onMouseLeave","r","opacity","getFullYear","getMonth","toString","padStart","getDate","getHours","dominantBaseline","fontSize","AllWordPlot","allWord","setAllWord","useEffect","fetch","then","response","json","circleSize","Math","log","count","circleScale","nice","circleOpacity","word","color","textAnchor","WordPlot","words","setWords","cDate","jsonUrl","year","month","day","newDate","hour","chackTime","startDate","endDate","urls","push","d1","d2","console","requests","url","Promise","all","dateItems","total_count","Object","values","App","setData","render","document","querySelector"],"mappings":"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","file":"static/js/main.6b267508.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch(\"twi_time_coordinate_200_w8_ws20.json\")\n      // fetch(\"test.json\")\n      .then((response) => response.json())\n      // .then((text) => // // console.log(text));\n      .then((data) => {\n        // // console.log(data);\n        setData(data);\n      });\n  }, []);\n\n  return (\n    <div>\n      <section className=\"hero is-primary\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">hello</h1>\n            <h2 className=\"subtitle\">hello</h2>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container max-width\">\n          <Chart data={data} />\n        </div>\n      </section>\n      <footer className=\"footer\">\n        <div className=\"content has-text-centered\">\n          <p>&copy;2020 xiaotiandong</p>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nconst Chart = ({ data }) => {\n  const [timeData, setTimeData] = useState([]);\n  // // // console.log(timeData);\n\n  const [windowSize, setWindowSize] = useState([]);\n\n  const contentWidth = 800;\n  const contentHeight = 800;\n  const margin = { left: 20, right: 20, top: 20, bottom: 70 };\n  const width = margin.left + margin.right + contentWidth;\n  const height = margin.top + margin.bottom + contentHeight;\n  const xScale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, (item) => item.x))\n    .range([0, contentWidth]);\n  const yScale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, (item) => item.y))\n    .range([contentHeight, 0]);\n  const line = d3\n    .line()\n    .x((item) => xScale(item.x))\n    .y((item) => yScale(item.y));\n  const getTime = (item) => {\n    const date = new Date(item.time);\n    return date.getTime();\n  };\n  const colorScale = d3\n    .scaleSequential(d3.interpolateCool)\n    .domain(d3.extent(data, getTime));\n\n  // // // console.log(colorScale.ticks());\n  if (colorScale.ticks().length !== 0) {\n    // // console.log(colorScale.ticks());\n  }\n\n  return (\n    <section className=\"section\">\n      <section className=\"section\">\n        <div className=\"container max-width\">\n          {/* <nav className=\"panel\"> */}\n          {/* <div className=\"panel-block\"> */}\n          <p className=\"control\">\n            <input\n              id=\"windowSize\"\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"Window size, defult 5.\"\n              // value=\"3\"\n              // defaultValue=\"5\"\n              onChange={(e) => {\n                // // console.log(\"e = \" + e.target.value);\n                setWindowSize(e.target.value);\n                // // console.log(\"windowSize = \" + windowSize);\n              }}\n            />\n          </p>\n          {/* </div> */}\n          {/* </nav> */}\n        </div>\n      </section>\n      <div className=\"container max-width\">\n        <div className=\"columns is-gapless\">\n          <div className=\"column is-half\">\n            <div className=\"container\">\n              <h3 className=\"title is-4\">twi_time_coordinate_200_w8_ws20</h3>\n            </div>\n            <div className=\"box\">\n              <svg viewBox={`0 0 ${width} ${height}`}>\n                <g transform={`translate(${margin.left}, ${margin.top})`}>\n                  <g>\n                    <path fill=\"none\" stroke=\"lightgray\" d={line(data)} />\n                  </g>\n                  <g>\n                    {data.map((item, i) => {\n                      // // console.log(\"before: \" + item.time);\n                      const date = new Date(item.time);\n                      // // // console.log(\"after: \" + date);\n                      // // // console.log(item.time);\n\n                      return (\n                        <g\n                          key={i}\n                          transform={`translate(${xScale(item.x)}, ${yScale(\n                            item.y\n                          )})`}\n                          onMouseEnter={() => {\n                            var timeData = item.time;\n                            // console.log(timeData);\n                            setTimeData(timeData);\n                            // console.log(\"windowSize = \" + windowSize);\n                          }}\n                          onMouseLeave={() => {\n                            var timeData = new Date();\n                            // console.log(timeData);\n                            setTimeData(timeData);\n                          }}\n                        >\n                          <circle\n                            r=\"3\"\n                            opacity=\"0.5\"\n                            fill={`${colorScale(getTime(item))}`}\n                          >\n                            <title>\n                              {date.getFullYear()}/\n                              {(date.getMonth() + 1)\n                                .toString()\n                                .padStart(2, \"0\")}\n                              /{date.getDate().toString().padStart(2, \"0\")}-\n                              {date.getHours().toString().padStart(2, \"0\")}\n                            </title>\n                          </circle>\n                        </g>\n                      );\n                    })}\n                  </g>\n                </g>\n                <g\n                  transform={`translate(${margin.left}, ${\n                    margin.top + contentHeight + 25\n                  })`}\n                >\n                  {colorScale.ticks().map((item, i) => {\n                    const date = new Date(item);\n                    return (\n                      <g key={i} transform={`translate(${80 * i}, ${0})`}>\n                        <circle\n                          r=\"2\"\n                          opacity=\"0.5\"\n                          fill={`${colorScale(item)}`}\n                        ></circle>\n                        <text dominantBaseline=\"central\" fontSize=\"8\" x=\"5\">\n                          {date.getFullYear()}\n                          {(date.getMonth() + 1).toString().padStart(2, \"0\")}\n                          {date.getDate().toString().padStart(2, \"0\")}\n                        </text>\n                      </g>\n                    );\n                  })}\n                </g>\n              </svg>\n            </div>\n          </div>\n          <div className=\"column\">\n            <section className=\"section\">\n              {/* <div className=\"container\"> */}\n              {/* <div className=\"column\"> */}\n              {timeData.length === 0 ? (\n                <div className=\"container\">\n                  <AllWordPlot />\n                </div>\n              ) : (\n                <div className=\"container\">\n                  <WordPlot timeData={timeData} windowSize={windowSize} />\n                </div>\n              )}\n              {/* </div> */}\n              {/* </div> */}\n            </section>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nconst AllWordPlot = () => {\n  const [allWord, setAllWord] = useState([]);\n  useEffect(() => {\n    fetch(\"dbscan_word_coordinate.json\")\n      // fetch(\"test.json\")\n      .then((response) => response.json())\n      // .then((text) => console.log(text));\n      .then((allWord) => {\n        // console.log(allWord);\n        setAllWord(allWord);\n      });\n  }, []);\n\n  const contentWidth = 800;\n  const contentHeight = 800;\n\n  // console.log(allWord);\n\n  const margin = {\n    left: 50,\n    right: 50,\n    top: 10,\n    bottom: 20,\n  };\n\n  const width = contentWidth + margin.left + margin.right;\n  const height = contentHeight + margin.top + margin.bottom;\n\n  // const color = d3.scaleOrdinal(d3.schemeAccent);\n\n  const color = (d) => {\n    if (d === \"red\") return \"lightgray\";\n    else return d;\n  };\n\n  // const circleSize = (d) => Math.pow(d.count, 0.7);\n  const circleSize = (d) => Math.log(d.count) * 3;\n\n  // const countMax = d3.max(words, (item) => item.count);\n  // const countMin = d3.min(words, (item) => item.count);\n\n  const circleScale = d3\n    .scaleLinear()\n    .domain([\n      d3.min(allWord, (item) => item.count),\n      d3.max(allWord, (item) => item.count),\n    ])\n    .range([0.5, 1])\n    .nice();\n\n  // console.log(countMin);\n\n  const circleOpacity = (d) => circleScale(d.count);\n  // 对数log处理 ， 透明度\n\n  // const circleSize = (d) => d.count;\n\n  const xScale = d3\n    .scaleLinear()\n    .domain([\n      d3.min(allWord, (item) => item.x),\n      d3.max(allWord, (item) => item.x),\n    ])\n    .range([0, contentWidth])\n    .nice();\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([\n      d3.max(allWord, (item) => item.y),\n      d3.min(allWord, (item) => item.y),\n    ])\n    .range([0, contentHeight])\n    .nice();\n\n  return (\n    <div className=\"container\">\n      <div className=\"container\">\n        <h3 className=\"title is-4\">All Time Word</h3>\n      </div>\n      <div className=\"container\">\n        <div className=\"box\">\n          <svg viewBox={`0 0 ${width} ${height}`}>\n            <g transform={`translate(${margin.left}, ${margin.top})`}>\n              {allWord.map((item, i) => {\n                return (\n                  <g\n                    key={i}\n                    transform={`translate(${xScale(item.x)}, ${yScale(\n                      item.y\n                    )})`}\n                    // style={{ cursor: \"pointer\" }}\n                  >\n                    <title>{`${item.word}`}</title>\n                    <circle\n                      r={`${circleSize(item) * 1.2}px`}\n                      fill={color(item.color)}\n                      opacity={circleOpacity(item)}\n                      // fill={item.color}\n                    />\n                    <text\n                      fontSize={`${circleSize(item) * 0.6}px`}\n                      textAnchor=\"middle\"\n                      dominantBaseline=\"central\"\n                    >\n                      {item.word}\n                    </text>\n                  </g>\n                );\n              })}\n            </g>\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n//////////////////////////\nconst WordPlot = ({ timeData, windowSize }) => {\n  const [words, setWords] = useState([]);\n\n  // // console.log(\"timeData = \" + timeData);\n  if (windowSize.length === 0) windowSize = 5;\n\n  // console.log(\"windowSize = \" + windowSize);\n\n  const cDate = new Date(timeData);\n  // const windowSize = 5;\n\n  // useEffect(() => {\n  //   fetch(timeData)\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       setData(data);\n  //     });\n  // }, [timeData]);\n\n  useEffect(() => {\n    const jsonUrl = (date) => {\n      var year = date.getFullYear();\n      var month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n      var day = date.getDate().toString().padStart(2, \"0\");\n\n      var newDate = `${year}${month}${day}`;\n      var hour = date.getHours().toString().padStart(2, \"0\");\n      var path = `./dbscan_word_coordinate_by_hour/${newDate}/${newDate}_${hour}.json`;\n      return path;\n    };\n\n    const chackTime = (date) => {\n      var startDate = new Date(\"2019/12/17 10:00\");\n      var endDate = new Date(\"2020/03/31 23:00\");\n\n      if (\n        date.getTime() >= startDate.getTime() &&\n        date.getTime() <= endDate.getTime()\n      ) {\n        return 1;\n      } else return 0;\n    };\n\n    const date = new Date(timeData);\n    const urls = [];\n    if (chackTime(date)) {\n      // // console.log(\"safe \" + date);\n      urls.push(jsonUrl(date));\n      for (let i = 1; i <= windowSize; ++i) {\n        const d1 = new Date(date.getTime() + 3600000 * i);\n        if (chackTime(d1)) {\n          urls.push(jsonUrl(d1));\n        }\n        const d2 = new Date(date.getTime() - 3600000 * i);\n        if (chackTime(d2)) {\n          urls.push(jsonUrl(d2));\n        }\n      }\n    }\n\n    console.log(urls);\n\n    // TODO deal non-existent urls\n\n    const requests = urls.map((url) => {\n      return fetch(url).then((response) => response.json());\n    });\n\n    console.log(\"reqs = \" + requests);\n\n    Promise.all(requests).then((data) => {\n      console.log(\"data = \" + data);\n      const words = {};\n      for (const dateItems of data) {\n        for (const item of dateItems) {\n          // // // console.log(\"item.word = \" + item.word);\n          if (!(item.word in words)) {\n            words[item.word] = {\n              word: item.word,\n              count: 0,\n              total_count: item.total_count,\n              color: item.color,\n              x: item.x,\n              y: item.y,\n            };\n          }\n          words[item.word].count += item.count;\n        }\n      }\n      // // console.log(\"words = \" + words);\n      setWords(Object.values(words));\n    });\n  }, [timeData, windowSize]);\n\n  const contentWidth = 800;\n  const contentHeight = 800;\n\n  // // console.log(words);\n\n  const margin = {\n    left: 50,\n    right: 50,\n    top: 10,\n    bottom: 20,\n  };\n\n  const width = contentWidth + margin.left + margin.right;\n  const height = contentHeight + margin.top + margin.bottom;\n\n  // const color = d3.scaleOrdinal(d3.schemeAccent);\n\n  const color = (d) => {\n    if (d === \"red\") return \"lightgray\";\n    else return d;\n  };\n\n  // const circleSize = (d) => Math.pow(d.count, 0.7);\n  const circleSize = (d) => Math.log(d.count) * 12;\n\n  // const countMax = d3.max(words, (item) => item.count);\n  // const countMin = d3.min(words, (item) => item.count);\n\n  const circleScale = d3\n    .scaleLinear()\n    .domain([\n      d3.min(words, (item) => item.count),\n      d3.max(words, (item) => item.count),\n    ])\n    .range([0.5, 1])\n    .nice();\n\n  // console.log(countMin);\n\n  const circleOpacity = (d) => circleScale(d.count);\n\n  const xScale = d3\n    .scaleLinear()\n    .domain([d3.min(words, (item) => item.x), d3.max(words, (item) => item.x)])\n    .range([0, contentWidth])\n    .nice();\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([d3.max(words, (item) => item.y), d3.min(words, (item) => item.y)])\n    .range([0, contentHeight])\n    .nice();\n\n  return words.length === 0 ? (\n    <div className=\"container\">\n      <AllWordPlot />\n    </div>\n  ) : (\n    <div className=\"container\">\n      <div className=\"container\">\n        <h3 className=\"title is-4\">\n          {cDate.getFullYear()}/\n          {(cDate.getMonth() + 1).toString().padStart(2, \"0\")}/\n          {cDate.getDate().toString().padStart(2, \"0\")}-\n          {cDate.getHours().toString().padStart(2, \"0\")} window = {windowSize}\n        </h3>\n      </div>\n      <div className=\"container\">\n        <div className=\"box\">\n          <svg viewBox={`0 0 ${width} ${height}`}>\n            <g transform={`translate(${margin.left}, ${margin.top})`}>\n              {words.map((item, i) => {\n                return (\n                  <g\n                    key={i}\n                    transform={`translate(${xScale(item.x)}, ${yScale(\n                      item.y\n                    )})`}\n                    // style={{ cursor: \"pointer\" }}\n                  >\n                    <title>{`word:${item.word}`}</title>\n                    <circle\n                      r={`${circleSize(item) * 1.4}px`}\n                      fill={color(item.color)}\n                      opacity={circleOpacity(item)}\n                      // fill={item.color}\n                    />\n                    <text\n                      fontSize={`${circleSize(item) * 1.6}px`}\n                      textAnchor=\"middle\"\n                      dominantBaseline=\"central\"\n                      // visibility=\"hidden\"\n                    >\n                      {item.word}\n                    </text>\n                  </g>\n                );\n              })}\n            </g>\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import \"bulma/css/bulma.css\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nrender(<App />, document.querySelector(\"#content\"));\n"],"sourceRoot":""}